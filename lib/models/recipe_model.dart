// ignore_for_file: non_constant_identifier_names

class RecipeModel {
  int? id; // Nullable because it's auto-generated by DB on create
  String user_id; // UUID, will be string in Dart
  String title;
  String? description;
  String? image_url; // Main image
  int? calories;
  int servings;
  int cooking_time_minutes;
  String difficulty_level;
  bool is_published;
  DateTime? created_at; // Nullable on create, auto-set by DB
  DateTime? updated_at; // Nullable on create, auto-set by DB

  // Extended fields based on create_recipe_screen.dart and schema possibilities
  // These might not be direct columns in 'recipes' table but are related or handled by services.
  String? ingredients_text; // For storing ingredients as a block of text
  String? directions_text;  // For storing directions as a block of text
  List<String>? gallery_image_urls; // For storing multiple gallery image URLs

  RecipeModel({
    this.id,
    required this.user_id,
    required this.title,
    this.description,
    this.image_url,
    this.calories,
    required this.servings,
    required this.cooking_time_minutes,
    this.difficulty_level = 'medium',
    this.is_published = true,
    this.created_at,
    this.updated_at,
    this.ingredients_text,
    this.directions_text,
    this.gallery_image_urls,
  });

  // Factory constructor to create a RecipeModel from a map (e.g., from Supabase)
  factory RecipeModel.fromJson(Map<String, dynamic> json) {
    return RecipeModel(
      id: json['id'] as int?,
      user_id: json['user_id'] as String,
      title: json['title'] as String,
      description: json['description'] as String?,
      image_url: json['image_url'] as String?,
      calories: json['calories'] as int?,
      servings: json['servings'] as int? ?? 1,
      cooking_time_minutes: json['cooking_time_minutes'] as int,
      difficulty_level: json['difficulty_level'] as String? ?? 'medium',
      is_published: json['is_published'] as bool? ?? true,
      created_at: json['created_at'] != null
          ? DateTime.tryParse(json['created_at'] as String)
          : null,
      updated_at: json['updated_at'] != null
          ? DateTime.tryParse(json['updated_at'] as String)
          : null,
      // Note: ingredients_text, directions_text, and gallery_image_urls
      // might not be directly in the 'recipes' table response unless joined or added.
      // For now, we assume they might be populated from related tables or processed data.
      // If they are stored as JSONB or text arrays in Postgres, parsing logic here would change.
      ingredients_text: json['ingredients_text'] as String?, // Assuming it's a text field for now
      directions_text: json['directions_text'] as String?,   // Assuming it's a text field for now
      gallery_image_urls: json['gallery_image_urls'] != null
          ? List<String>.from(json['gallery_image_urls'] as List)
          : null,
    );
  }

  // Method to convert a RecipeModel instance to a map (e.g., for Supabase insert/update)
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = {
      'user_id': user_id,
      'title': title,
      'description': description,
      'image_url': image_url,
      'calories': calories,
      'servings': servings,
      'cooking_time_minutes': cooking_time_minutes,
      'difficulty_level': difficulty_level,
      'is_published': is_published,
      // created_at and updated_at are usually handled by the database.
      // id is also handled by the database.
    };

    // Add these only if they are part of the 'recipes' table or a related JSONB field
    // If ingredients_text, directions_text are separate tables, they shouldn't be here.
    // Based on create_recipe_screen.dart, these are prepared as simple text.
    // We will need to decide if these go into the main `recipes` table
    // or if `recipe_service` should handle them by inserting into
    // `recipe_ingredients` and `recipe_instructions` by parsing the text.
    // For now, matching the expected structure from create_recipe_screen's `recipeData` map
    // and assuming they might be added as text fields for simplicity, or handled by the service.

    if (ingredients_text != null) {
      // This field is not in the 'recipes' table schema directly.
      // It's an intermediary field from the UI.
      // The service layer will need to handle this, potentially parsing it
      // and saving to the `recipe_ingredients` table.
      // For sending to a service function that expects it, we include it.
      // data['ingredients_text'] = ingredients_text;
    }
    if (directions_text != null) {
      // Similar to ingredients_text.
      // data['directions_text'] = directions_text;
    }
    if (gallery_image_urls != null && gallery_image_urls!.isNotEmpty) {
      // This should ideally be handled by inserting into `recipe_gallery_images` table.
      // If `recipes` table had a JSONB column for this, it would be:
      // data['gallery_image_urls'] = gallery_image_urls;
    }

    // Clean null values for Supabase, it prefers fields to be absent if null
    // unless the column specifically allows nulls and you want to set it to null.
    data.removeWhere((key, value) => value == null && key != 'description' && key != 'image_url' && key != 'calories');


    return data;
  }
}

// Example Usage (for testing the model):
/*
void main() {
  // From JSON (simulating data from Supabase)
  Map<String, dynamic> supabaseData = {
    'id': 1,
    'user_id': 'some-uuid-string',
    'title': 'Pancakes',
    'description': 'Delicious fluffy pancakes.',
    'image_url': 'http://example.com/pancakes.jpg',
    'calories': 300,
    'servings': 4,
    'cooking_time_minutes': 20,
    'difficulty_level': 'easy',
    'is_published': true,
    'created_at': DateTime.now().toIso8601String(),
    'updated_at': DateTime.now().toIso8601String(),
    'gallery_image_urls': ['http://example.com/gallery1.jpg', 'http://example.com/gallery2.jpg'],
    'ingredients_text': 'Flour\nSugar\nEggs',
    'directions_text': 'Mix\nCook\nServe'
  };

  RecipeModel recipe = RecipeModel.fromJson(supabaseData);
  print('Recipe Title: ${recipe.title}');
  print('Recipe Servings: ${recipe.servings}');
  print('Recipe Gallery URL 1: ${recipe.gallery_image_urls?.first}');

  // To JSON (simulating data to send to Supabase for the main 'recipes' table)
  Map<String, dynamic> recipeJson = recipe.toJson();
  print('Recipe JSON for Supabase: $recipeJson');

  // Creating a new recipe (ID and timestamps would be null/handled by DB)
  RecipeModel newRecipe = RecipeModel(
    user_id: 'another-uuid',
    title: 'Omelette',
    servings: 1,
    cooking_time_minutes: 10,
    difficulty_level: 'easy',
    ingredients_text: 'Eggs\nSalt\nPepper',
    directions_text: 'Whisk eggs.\nCook in pan.',
    gallery_image_urls: [],
  );
  Map<String, dynamic> newRecipeJson = newRecipe.toJson();
  print('New Recipe JSON for Supabase: $newRecipeJson');
}
*/
