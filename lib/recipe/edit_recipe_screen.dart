import 'dart:io';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
// import 'package:supabase_flutter/supabase_flutter.dart'; // Tidak digunakan secara langsung di sini
import '../services/image_upload_service.dart';
import '../services/recipe_service.dart';
import '../models/recipe_model.dart';
import '../models/tag_models.dart'; // Added import for tag models
import '../services/supabase_client.dart'; // Untuk SupabaseClientWrapper().auth.currentUser

// Data class for managing individual ingredient row inputs (copied from create_recipe_screen.dart)
// Consider moving to a shared models file if this project grows.
class IngredientRowData {
  final UniqueKey id;
  final TextEditingController nameController;
  final TextEditingController quantityController;
  final TextEditingController unitController;

  IngredientRowData({
    String initialName = '',
    String initialQuantity = '',
    String initialUnit = '',
    // required this.id, // id is generated by UniqueKey()
  }) : id = UniqueKey(),
       nameController = TextEditingController(text: initialName),
       quantityController = TextEditingController(text: initialQuantity),
       unitController = TextEditingController(text: initialUnit);

  void dispose() {
    nameController.dispose();
    quantityController.dispose();
    unitController.dispose();
  }

  bool get isEmpty {
    return nameController.text.trim().isEmpty &&
           quantityController.text.trim().isEmpty &&
           unitController.text.trim().isEmpty;
  }
}


class EditRecipeScreen extends StatefulWidget {
  final RecipeModel recipe;

  const EditRecipeScreen({super.key, required this.recipe});

  @override
  State<EditRecipeScreen> createState() => _EditRecipeScreenState();
}

class _EditRecipeScreenState extends State<EditRecipeScreen> {
  final _formKey = GlobalKey<FormState>();

  late TextEditingController _titleController;
  late TextEditingController _descriptionController;

  File? _newSelectedImageFile;
  String? _existingImageUrl;

  final ImagePicker _picker = ImagePicker();
  final ImageUploadService _imageUploadService = ImageUploadService();
  final RecipeService _recipeService = RecipeService();
  bool _isUploadingOrSaving = false;

  late TextEditingController _caloriesController;
  late TextEditingController _servingsController;
  late TextEditingController _cookingMinutesController;
  String? _selectedDifficultyLevel; 
  List<IngredientRowData> _ingredientRows = []; // Changed to non-final
  late TextEditingController _directionsController; 

  List<String> _existingGalleryImageUrls = []; // Not final, reassigned in initState if widget.recipe.gallery_image_urls is not null
  final List<File> _newSelectedGalleryImageFiles = []; // Made final

  // State for tags - these are re-assigned in _fetchTags
  List<Allergen> _availableAllergens = [];
  List<DietProgram> _availableDietPrograms = [];
  List<Equipment> _availableEquipment = [];

  final Set<int> _selectedAllergenIds = {}; // Made final
  final Set<int> _selectedDietProgramIds = {}; // Made final
  final Set<int> _selectedEquipmentIds = {}; // Made final
  bool _isLoadingTags = true;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.recipe.title);
    _descriptionController = TextEditingController(text: widget.recipe.description); // Wajib
    _existingImageUrl = widget.recipe.image_url; // Wajib
    _caloriesController = TextEditingController(text: widget.recipe.calories.toString()); // Wajib
    _servingsController = TextEditingController(text: widget.recipe.servings.toString()); // Wajib
    _cookingMinutesController = TextEditingController(text: widget.recipe.cooking_time_minutes.toString()); // Wajib
    // _difficultyLevelController = TextEditingController(text: widget.recipe.difficulty_level); // Dihapus
    _selectedDifficultyLevel = widget.recipe.difficulty_level; // Inisialisasi dari resep yang diedit
    // _ingredientsController = TextEditingController(text: widget.recipe.ingredients_text); // Diganti

    // Populate _ingredientRows from widget.recipe.ingredients
    if (widget.recipe.ingredients != null && widget.recipe.ingredients!.isNotEmpty) {
      _ingredientRows = widget.recipe.ingredients!.map((ingModel) {
        return IngredientRowData(
          initialName: ingModel.ingredient_text ?? '', // ingredient_text is name here
          initialQuantity: ingModel.quantity?.toString() ?? '',
          initialUnit: ingModel.unit ?? '',
        );
      }).toList();
    } else {
      // If no structured ingredients, add one empty row for editing.
      // We are NOT parsing ingredients_text back due to complexity and potential inaccuracy.
      // User will need to re-enter if only old text format existed.
      _ingredientRows.add(IngredientRowData());
    }

    // Untuk Edit, directions_text digunakan untuk instruksi. Ini juga akan dibuat wajib.
    // Jika resep lama mungkin memiliki instructions (struktur baru) dan directions_text kosong,
    // kita perlu cara untuk memigrasikannya atau memastikan directions_text diisi.
    // Untuk saat ini, kita asumsikan directions_text adalah sumber kebenaran untuk instruksi di layar edit.
    String initialDirections = widget.recipe.directions_text ?? '';
    if (initialDirections.isEmpty && widget.recipe.instructions != null && widget.recipe.instructions!.isNotEmpty) {
      // Jika directions_text kosong tapi ada instructions, kita konversi instructions ke format directions_text
      initialDirections = widget.recipe.instructions!
          .map((instr) => instr.instruction)
          .join('\n');
    }
    _directionsController = TextEditingController(text: initialDirections); // Wajib

    _existingGalleryImageUrls = List<String>.from(widget.recipe.gallery_image_urls ?? []);

    _fetchTagsAndPopulateSelected();
  }

  Future<void> _fetchTagsAndPopulateSelected() async {
    try {
      // Fetch all available tags
      final allergens = await _recipeService.getAllergens();
      final dietPrograms = await _recipeService.getDietPrograms();
      final equipment = await _recipeService.getEquipment();

      if (!mounted) return;
      setState(() {
        _availableAllergens = allergens;
        _availableDietPrograms = dietPrograms;
        _availableEquipment = equipment;

        // Populate selected tags
        _selectedAllergenIds.clear(); // Clear before adding to avoid duplicates if _fetch is called multiple times
        _selectedAllergenIds.addAll(widget.recipe.allergensList?.map((a) => a.id).toSet() ?? {});
        _selectedDietProgramIds.clear();
        _selectedDietProgramIds.addAll(widget.recipe.dietProgramsList?.map((dp) => dp.id).toSet() ?? {});
        _selectedEquipmentIds.clear();
        _selectedEquipmentIds.addAll(widget.recipe.equipmentList?.map((e) => e.id).toSet() ?? {});
        
        _isLoadingTags = false;
      });
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal memuat informasi tag: $e')),
      );
      setState(() {
        _isLoadingTags = false;
      });
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _caloriesController.dispose();
    _servingsController.dispose();
    _cookingMinutesController.dispose();
    // _difficultyLevelController.dispose(); // Dihapus
    // _ingredientsController.dispose(); // Diganti
    for (var row in _ingredientRows) {
      row.dispose();
    }
    _directionsController.dispose();
    super.dispose();
  }

  List<RecipeInstructionModel> _parseDirectionsToInstructions(String directionsText) {
    final lines = directionsText.split('\n').where((line) => line.trim().isNotEmpty).toList();
    List<RecipeInstructionModel> instructions = [];
    for (int i = 0; i < lines.length; i++) {
      instructions.add(RecipeInstructionModel(
        step_number: i + 1,
        instruction: lines[i].trim(),
        // image_url for instructions from directions_text will be null
        // as this screen does not support per-step image editing for directions_text
      ));
    }
    return instructions;
  }

   double _parseQuantity(String quantityStr) { // Copied from create_recipe_screen
    quantityStr = quantityStr.trim().replaceAll(',', '.');
    if (quantityStr.isEmpty) return 1.0;

    if (quantityStr.contains('/')) {
        final parts = quantityStr.split(' ');
        double totalQuantity = 0;
        if (parts.length > 1) {
            totalQuantity += double.tryParse(parts[0]) ?? 0;
            final fractionParts = parts[1].split('/');
            if (fractionParts.length == 2) {
                double numerator = double.tryParse(fractionParts[0]) ?? 0;
                double denominator = double.tryParse(fractionParts[1]) ?? 1;
                if (denominator != 0) {
                    totalQuantity += numerator / denominator;
                }
            }
        } else {
            final fractionParts = quantityStr.split('/');
            if (fractionParts.length == 2) {
                double numerator = double.tryParse(fractionParts[0]) ?? 0;
                double denominator = double.tryParse(fractionParts[1]) ?? 1;
                if (denominator != 0) {
                    totalQuantity = numerator / denominator;
                } else {
                    totalQuantity = 0;
                }
            } else {
                 return double.tryParse(quantityStr) ?? 1.0;
            }
        }
        return totalQuantity > 0 ? totalQuantity : 1.0;
    } else {
        return double.tryParse(quantityStr) ?? 1.0;
    }
}


  Future<void> _saveChanges() async {
     if (_newSelectedImageFile == null && (_existingImageUrl == null || _existingImageUrl!.isEmpty)) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Gambar utama resep tidak boleh kosong.')),
      );
      return;
    }

    if (_selectedDifficultyLevel == null) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Silakan pilih tingkat kesulitan.')),
      );
      return;
    }

    if (!_formKey.currentState!.validate()) {
       if (!mounted) return;
       ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Harap perbaiki kesalahan dalam formulir sebelum menyimpan.')),
      );
      return;
    }
    _formKey.currentState!.save();

    final currentUser = SupabaseClientWrapper().auth.currentUser;
    if (currentUser == null) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Anda harus masuk untuk mengedit resep.')),
      );
      return;
    }

    if (widget.recipe.user_id != currentUser.id) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Anda tidak berwenang untuk mengedit resep ini.')),
        );
        return;
    }

    if (_isUploadingOrSaving) return;

    setState(() {
      _isUploadingOrSaving = true;
    });

    String? finalMainImageUrl = _existingImageUrl;
    if (_newSelectedImageFile != null) {
      finalMainImageUrl = await _imageUploadService.uploadImage(_newSelectedImageFile!);
      if (finalMainImageUrl == null) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Unggah gambar utama resep gagal. Silakan coba lagi.')),
        );
        setState(() { _isUploadingOrSaving = false; });
        return;
      }
    }

    List<String> finalGalleryImageUrls = List.from(_existingGalleryImageUrls); 

    if (_newSelectedGalleryImageFiles.isNotEmpty) {
      for (File imageFile in _newSelectedGalleryImageFiles) {
        String? url = await _imageUploadService.uploadImage(imageFile);
        if (url != null) {
          finalGalleryImageUrls.add(url);
        } else {
          // print('Sebuah gambar galeri baru gagal diunggah dan akan dilewati.'); // Removed print
           if (!mounted) return; // Check before showing SnackBar
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Sebuah gambar galeri baru gagal diunggah dan dilewati.')),
            );
          // Not returning here, just skipping the image
        }
      }
    }
    
    // Konversi _directionsController.text ke List<RecipeInstructionModel>
    // karena model RecipeModel sekarang menggunakan `instructions` bukan `directions_text`
    // untuk penyimpanan terstruktur. `directions_text` masih bisa disimpan untuk kompatibilitas.
    List<RecipeInstructionModel> updatedInstructions = _parseDirectionsToInstructions(_directionsController.text);

    // Process Ingredients from _ingredientRows
    List<RecipeIngredientModel> processedIngredients = [];
    String ingredientsTextConcatenated = "";

    for (int i = 0; i < _ingredientRows.length; i++) {
      final row = _ingredientRows[i];
      final name = row.nameController.text.trim();
      final quantityStr = row.quantityController.text.trim();
      final unit = row.unitController.text.trim();

      if (name.isEmpty && quantityStr.isEmpty && unit.isEmpty) {
        continue; 
      }
      if (name.isEmpty) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Nama bahan di baris ${i + 1} tidak boleh kosong jika baris tidak sepenuhnya kosong.')));
        setState(() { _isUploadingOrSaving = false; });
        return;
      }
      if (quantityStr.isEmpty) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Jumlah bahan di baris ${i + 1} tidak boleh kosong jika nama bahan diisi.')));
        setState(() { _isUploadingOrSaving = false; });
        return;
      }
      double quantity = _parseQuantity(quantityStr);
       if (quantity <= 0 && quantityStr.isNotEmpty) {
           if (!mounted) return;
           ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Jumlah bahan "$name" tidak valid (harus lebih besar dari 0).')));
           setState(() { _isUploadingOrSaving = false; });
           return;
      }

      processedIngredients.add(RecipeIngredientModel(
        ingredient_text: name,
        quantity: quantity,
        unit: unit.isNotEmpty ? unit : null,
        order_index: processedIngredients.length,
      ));
      ingredientsTextConcatenated += "$quantityStr $unit $name\n";
    }
     if (processedIngredients.isEmpty && _ingredientRows.any((row) => !row.isEmpty)) {
       if (!mounted) return;
       ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Mohon masukkan minimal satu bahan dengan nama dan jumlah yang valid.')));
       setState(() { _isUploadingOrSaving = false; });
       return;
    }
    if (processedIngredients.isEmpty && _ingredientRows.every((row) => row.isEmpty) && _ingredientRows.isNotEmpty) {
        if (!mounted) return;
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Resep harus memiliki minimal satu bahan.')));
        setState(() { _isUploadingOrSaving = false; });
        return;
    }


    RecipeModel recipeToUpdate = RecipeModel(
      id: widget.recipe.id,
      user_id: widget.recipe.user_id, 
      title: _titleController.text, 
      description: _descriptionController.text, 
      image_url: finalMainImageUrl, 
      calories: int.parse(_caloriesController.text), 
      servings: int.parse(_servingsController.text), 
      cooking_time_minutes: int.parse(_cookingMinutesController.text), 
      difficulty_level: _selectedDifficultyLevel!, 
      is_published: widget.recipe.is_published, 
      created_at: widget.recipe.created_at, 
      ingredients_text: ingredientsTextConcatenated.trim().isNotEmpty ? ingredientsTextConcatenated.trim() : null,
      directions_text: _directionsController.text, 
      instructions: updatedInstructions, 
      gallery_image_urls: finalGalleryImageUrls.isNotEmpty ? finalGalleryImageUrls : null, 
      selectedAllergenIds: _selectedAllergenIds.toList(), 
      selectedDietProgramIds: _selectedDietProgramIds.toList(), 
      selectedEquipmentIds: _selectedEquipmentIds.toList(), 
    );

    try {
      await _recipeService.updateRecipe(recipeToUpdate, finalGalleryImageUrls);
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Resep berhasil diperbarui!')),
      );
      Navigator.pop(context, true); 
    } catch (e) {
      // print('Error memperbarui resep: $e'); // Removed print
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Gagal memperbarui resep: $e')),
      );
    } finally {
      if (mounted) { // Check mounted before final setState
        setState(() {
          _isUploadingOrSaving = false;
        });
      }
    }
  }

  Future<void> _pickImage() async {
    if (_isUploadingOrSaving) return;
    final XFile? pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _newSelectedImageFile = File(pickedFile.path);
      });
    }
  }

  Future<void> _pickGalleryImages() async {
    if (_isUploadingOrSaving) return;
    final List<XFile> pickedFiles = await _picker.pickMultiImage();
    if (pickedFiles.isNotEmpty) {
      setState(() {
        _newSelectedGalleryImageFiles.addAll(pickedFiles.map((xf) => File(xf.path)).toList());
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final textStyle = GoogleFonts.dmSans(fontSize: 16);
    final labelStyle = GoogleFonts.dmSans(fontSize: 14, color: Colors.grey[700]);

    return Scaffold(
      appBar: AppBar(
        title: Text('Edit Resep', style: GoogleFonts.dmSans(fontWeight: FontWeight.bold)),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 1,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: <Widget>[
                TextFormField(
                  key: const Key('title_field'),
                  controller: _titleController,
                  style: textStyle,
                  decoration: InputDecoration(labelText: 'Judul Resep*', labelStyle: labelStyle),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Judul resep tidak boleh kosong';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  key: const Key('description_field'),
                  controller: _descriptionController,
                  style: textStyle,
                  decoration: InputDecoration(labelText: 'Deskripsi Resep*', labelStyle: labelStyle),
                  maxLines: 3,
                  keyboardType: TextInputType.multiline,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Deskripsi resep tidak boleh kosong';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 24),

                // Tags Section (Opsional)
                if (_isLoadingTags)
                  const Center(child: CircularProgressIndicator())
                else ...[
                  _buildTagSelectionSection<Allergen>(
                    title: 'Alergen (Pilih jika ada)',
                    availableTags: _availableAllergens,
                    selectedTagIds: _selectedAllergenIds,
                    onSelected: (selected, tagId) {
                      setState(() {
                        if (selected) {
                          _selectedAllergenIds.add(tagId);
                        } else {
                          _selectedAllergenIds.remove(tagId);
                        }
                      });
                    },
                  ),
                  const SizedBox(height: 16),
                  _buildTagSelectionSection<DietProgram>(
                    title: 'Program Diet (Pilih jika sesuai)',
                    availableTags: _availableDietPrograms,
                    selectedTagIds: _selectedDietProgramIds,
                    onSelected: (selected, tagId) {
                      setState(() {
                        if (selected) {
                          _selectedDietProgramIds.add(tagId);
                        } else {
                          _selectedDietProgramIds.remove(tagId);
                        }
                      });
                    },
                  ),
                  const SizedBox(height: 16),
                  _buildTagSelectionSection<Equipment>(
                    title: 'Peralatan yang Dibutuhkan (Pilih jika ada)',
                    availableTags: _availableEquipment,
                    selectedTagIds: _selectedEquipmentIds,
                    onSelected: (selected, tagId) {
                      setState(() {
                        if (selected) {
                          _selectedEquipmentIds.add(tagId);
                        } else {
                          _selectedEquipmentIds.remove(tagId);
                        }
                      });
                    },
                  ),
                ],
                const SizedBox(height: 16),

                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text("Gambar Utama Resep*", style: GoogleFonts.dmSans(fontSize: 16, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),
                      if (_newSelectedImageFile != null)
                        Container(
                          height: 200,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey),
                            image: DecorationImage(image: FileImage(_newSelectedImageFile!), fit: BoxFit.cover),
                          ),
                          margin: const EdgeInsets.only(bottom: 8.0),
                        )
                      else if (_existingImageUrl != null && _existingImageUrl!.isNotEmpty)
                        Container(
                          height: 200,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey),
                            image: DecorationImage(image: NetworkImage(_existingImageUrl!), fit: BoxFit.cover),
                          ),
                          margin: const EdgeInsets.only(bottom: 8.0),
                        )
                      else // Placeholder if no image exists and none selected
                        Container(
                          height: 100,
                          width: double.infinity,
                           decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey[400]!),
                            borderRadius: BorderRadius.circular(4.0)
                          ),
                          child: Center(child: Text("Tidak ada gambar utama", style: labelStyle)),
                          margin: const EdgeInsets.only(bottom: 8.0),
                        ),
                      ElevatedButton.icon(
                        key: const Key('pick_image_button_edit'),
                        onPressed: _isUploadingOrSaving ? null : _pickImage,
                        icon: const Icon(Icons.image),
                        label: Text((_existingImageUrl != null && _existingImageUrl!.isNotEmpty) || _newSelectedImageFile != null ? 'Ganti Gambar Utama' : 'Pilih Gambar Utama'),
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.grey[300], foregroundColor: Colors.black87),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  key: const Key('calories_field'),
                  controller: _caloriesController,
                  style: textStyle,
                  decoration: InputDecoration(labelText: 'Kalori* (contoh: 250)', labelStyle: labelStyle),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                     if (value == null || value.isEmpty) {
                      return 'Kalori tidak boleh kosong';
                    }
                    if (int.tryParse(value) == null || int.parse(value) < 0) {
                      return 'Masukkan jumlah kalori yang valid';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  key: const Key('servings_field'),
                  controller: _servingsController,
                  style: textStyle,
                  decoration: InputDecoration(labelText: 'Porsi* (contoh: 4)', labelStyle: labelStyle),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Jumlah porsi tidak boleh kosong';
                    }
                    if (int.tryParse(value) == null || int.parse(value) <= 0) {
                      return 'Masukkan jumlah porsi yang valid';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                TextFormField(
                  key: const Key('cooking_minutes_field'),
                  controller: _cookingMinutesController,
                  style: textStyle,
                  decoration: InputDecoration(labelText: 'Waktu Memasak (Menit)* (contoh: 30)', labelStyle: labelStyle),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Waktu memasak tidak boleh kosong';
                    }
                    if (int.tryParse(value) == null || int.parse(value) < 0) {
                      return 'Masukkan waktu memasak yang valid';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                // Difficulty Level ChoiceChips
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text("Tingkat Kesulitan*", style: GoogleFonts.dmSans(fontSize: 16, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 8),
                    Wrap(
                      spacing: 8.0,
                      children: <Widget>[
                        ChoiceChip(
                          label: Text('Mudah', style: GoogleFonts.dmSans(fontSize: 13)),
                          selected: _selectedDifficultyLevel == 'easy',
                          onSelected: (bool selected) {
                            setState(() {
                              _selectedDifficultyLevel = selected ? 'easy' : (_selectedDifficultyLevel == 'easy' ? null : _selectedDifficultyLevel);
                            });
                          },
                          selectedColor: Colors.teal[100],
                          backgroundColor: Colors.grey[200],
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                            side: BorderSide(
                              color: _selectedDifficultyLevel == 'easy' ? Colors.teal : Colors.grey[400]!,
                            ),
                          ),
                        ),
                        ChoiceChip(
                          label: Text('Sedang', style: GoogleFonts.dmSans(fontSize: 13)),
                          selected: _selectedDifficultyLevel == 'medium',
                          onSelected: (bool selected) {
                            setState(() {
                               _selectedDifficultyLevel = selected ? 'medium' : (_selectedDifficultyLevel == 'medium' ? null : _selectedDifficultyLevel);
                            });
                          },
                          selectedColor: Colors.teal[100],
                          backgroundColor: Colors.grey[200],
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                            side: BorderSide(
                              color: _selectedDifficultyLevel == 'medium' ? Colors.teal : Colors.grey[400]!,
                            ),
                          ),
                        ),
                        ChoiceChip(
                          label: Text('Sulit', style: GoogleFonts.dmSans(fontSize: 13)),
                          selected: _selectedDifficultyLevel == 'hard',
                          onSelected: (bool selected) {
                            setState(() {
                              _selectedDifficultyLevel = selected ? 'hard' : (_selectedDifficultyLevel == 'hard' ? null : _selectedDifficultyLevel);
                            });
                          },
                          selectedColor: Colors.teal[100],
                          backgroundColor: Colors.grey[200],
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(16),
                            side: BorderSide(
                              color: _selectedDifficultyLevel == 'hard' ? Colors.teal : Colors.grey[400]!,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                // Removed erroneous wrapping TextFormField for ingredients.
                // Structured Ingredients Input (similar to create_recipe_screen)
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text("Bahan-Bahan*", style: GoogleFonts.dmSans(fontSize: 16, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 8),
                      if (_ingredientRows.isEmpty)
                        Padding(
                          padding: const EdgeInsets.symmetric(vertical: 8.0),
                          child: Text("Belum ada bahan ditambahkan.", style: labelStyle),
                        ),
                    Column(
                      children: _ingredientRows.asMap().entries.map((entry) {
                        int idx = entry.key;
                        IngredientRowData rowData = entry.value;
                        return Card(
                          key: rowData.id,
                          margin: const EdgeInsets.symmetric(vertical: 4.0),
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Column(
                              children: [
                                Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Expanded(
                                      flex: 4,
                                      child: TextFormField(
                                        controller: rowData.nameController,
                                        style: textStyle,
                                        decoration: InputDecoration(labelText: 'Nama Bahan*', labelStyle: labelStyle),
                                      ),
                                    ),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      flex: 2,
                                      child: TextFormField(
                                        controller: rowData.quantityController,
                                        style: textStyle,
                                        decoration: InputDecoration(labelText: 'Jumlah*', labelStyle: labelStyle),
                                        keyboardType: const TextInputType.numberWithOptions(decimal: true),
                                      ),
                                    ),
                                    const SizedBox(width: 8),
                                    Expanded(
                                      flex: 2,
                                      child: TextFormField(
                                        controller: rowData.unitController,
                                        style: textStyle,
                                        decoration: InputDecoration(labelText: 'Satuan', labelStyle: labelStyle),
                                      ),
                                    ),
                                    if (_ingredientRows.length > 1)
                                      IconButton(
                                        icon: const Icon(Icons.remove_circle_outline, color: Colors.red),
                                        onPressed: () {
                                          setState(() {
                                            rowData.dispose();
                                            _ingredientRows.removeAt(idx);
                                          });
                                        },
                                      )
                                    else
                                      const SizedBox(width:48), // Placeholder for alignment
                                  ],
                                ),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                    const SizedBox(height: 8),
                    ElevatedButton.icon(
                      onPressed: () {
                        setState(() {
                          _ingredientRows.add(IngredientRowData());
                        });
                      },
                      icon: const Icon(Icons.add_circle_outline),
                      label: const Text('Tambah Bahan'),
                      style: ElevatedButton.styleFrom(backgroundColor: Colors.green[100], foregroundColor: Colors.green[900]),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                TextFormField(
                  key: const Key('directions_field'), 
                  controller: _directionsController, // Ini field instruksi di edit screen
                  style: textStyle,
                  decoration: InputDecoration(
                    labelText: 'Instruksi* (satu langkah per baris)',
                    labelStyle: labelStyle,
                    hintText: 'Campur tepung dan telur.\nPanggang pada suhu 175°C selama 30 menit.\n...',
                  ),
                  maxLines: null,
                  keyboardType: TextInputType.multiline,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Instruksi tidak boleh kosong';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text("Gambar Galeri (Opsional)", style: GoogleFonts.dmSans(fontSize: 16, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),
                      ElevatedButton.icon(
                        key: const Key('pick_gallery_images_button_edit'),
                        onPressed: _isUploadingOrSaving ? null : _pickGalleryImages,
                        style: ElevatedButton.styleFrom(backgroundColor: Colors.grey[300], foregroundColor: Colors.black87),
                        icon: const Icon(Icons.photo_library),
                        label: const Text('Tambah Gambar Galeri Lainnya'),
                      ),
                      const SizedBox(height: 8),
                      if (_existingGalleryImageUrls.isNotEmpty || _newSelectedGalleryImageFiles.isNotEmpty)
                        SizedBox(
                          height: 120,
                          child: ListView.builder(
                            scrollDirection: Axis.horizontal,
                            itemCount: _existingGalleryImageUrls.length + _newSelectedGalleryImageFiles.length,
                            itemBuilder: (context, index) {
                              Widget imageWidget;
                              bool isNewFile = index >= _existingGalleryImageUrls.length;

                              if (isNewFile) {
                                imageWidget = Image.file(_newSelectedGalleryImageFiles[(index - _existingGalleryImageUrls.length).toInt()], fit: BoxFit.cover);
                              } else {
                                imageWidget = Image.network(_existingGalleryImageUrls[index], fit: BoxFit.cover,
                                  errorBuilder: (context, error, stackTrace) => const Icon(Icons.broken_image, size: 50),
                                );
                              }

                              return Padding(
                                padding: const EdgeInsets.only(right: 8.0),
                                child: Stack(
                                  children: [
                                    Container(
                                      width: 100,
                                      height: 100,
                                      decoration: BoxDecoration(border: Border.all(color: Colors.grey)),
                                      child: imageWidget,
                                    ),
                                    Positioned(
                                      top: -10,
                                      right: -10,
                                      child: IconButton(
                                        icon: const Icon(Icons.remove_circle, color: Colors.red, size: 20),
                                        onPressed: () {
                                          setState(() {
                                            if (isNewFile) {
                                              _newSelectedGalleryImageFiles.removeAt((index - _existingGalleryImageUrls.length).toInt());
                                            } else {
                                              _existingGalleryImageUrls.removeAt(index);
                                            }
                                          });
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            },
                          ),
                        )
                      else
                        Text("Belum ada gambar galeri.", style: GoogleFonts.dmSans()),
                    ],
                  ),
                ),
                const SizedBox(height: 32),
                _isUploadingOrSaving
                  ? const Center(child: CircularProgressIndicator())
                  : ElevatedButton(
                      key: const Key('save_button'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blueAccent,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        // textStyle: GoogleFonts.dmSans(fontSize: 18, fontWeight: FontWeight.bold), // Text widget below defines style
                      ),
                      onPressed: _saveChanges,
                      child: Text('Simpan Perubahan', style: GoogleFonts.dmSans(fontSize: 18, fontWeight: FontWeight.bold)),
                    ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTagSelectionSection<T>({
    required String title,
    required List<T> availableTags,
    required Set<int> selectedTagIds,
    required Function(bool, int) onSelected,
  }) {
    final labelStyle = GoogleFonts.dmSans(fontSize: 14, color: Colors.grey[700]);
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title, style: GoogleFonts.dmSans(fontSize: 16, fontWeight: FontWeight.bold)),
        const SizedBox(height: 8),
        if (availableTags.isEmpty && !_isLoadingTags)
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0),
            child: Text("Tidak ada ${title.toLowerCase().split(' ')[0]} tersedia untuk dipilih.", style: labelStyle),
          )
        else
          Wrap(
            spacing: 8.0,
            runSpacing: 4.0,
            children: availableTags.map((tag) {
              final tagId = (tag as dynamic).id as int;
              final tagName = (tag as dynamic).name as String;
              return ChoiceChip(
                label: Text(tagName, style: GoogleFonts.dmSans(fontSize: 13)),
                selected: selectedTagIds.contains(tagId),
                onSelected: (selected) {
                  onSelected(selected, tagId);
                },
                selectedColor: Colors.teal[100],
                backgroundColor: Colors.grey[200],
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                  side: BorderSide(
                    color: selectedTagIds.contains(tagId) ? Colors.teal : Colors.grey[400]!,
                  ),
                ),
              );
            }).toList(),
          ),
      ],
    );
  }
}
